#!/bin/bash
# Simple Server Manager CLI
# Dependencies: jq, sshpass (for password-based SSH),fzf 

CONFIG_FILE="$HOME/.servers.json"



# 🔹 Detect package manager (apt, yum, dnf, brew, pacman)
detect_package_manager() {
  if command -v apt >/dev/null 2>&1; then
    echo "apt"
  elif command -v yum >/dev/null 2>&1; then
    echo "yum"
  elif command -v dnf >/dev/null 2>&1; then
    echo "dnf"
  elif command -v pacman >/dev/null 2>&1; then
    echo "pacman"
  elif command -v brew >/dev/null 2>&1; then
    echo "brew"
  else
    echo "unknown"
  fi
}

# 🔹 Check & install missing dependencies
check_dependencies() {
  local deps=("jq" "sshpass" "fzf")
  local missing=()
  for dep in "${deps[@]}"; do
    if ! command -v "$dep" >/dev/null 2>&1; then
      missing+=("$dep")
    fi
  done

  if [ ${#missing[@]} -eq 0 ]; then
    return
  fi

  echo "⚠️ Missing dependencies: ${missing[*]}"
  pkg_manager=$(detect_package_manager)

  case "$pkg_manager" in
    apt)
      echo "📦 Installing via apt..."
      sudo apt update && sudo apt install -y "${missing[@]}"
      ;;
    yum)
      echo "📦 Installing via yum..."
      sudo yum install -y "${missing[@]}"
      ;;
    dnf)
      echo "📦 Installing via dnf..."
      sudo dnf install -y "${missing[@]}"
      ;;
    pacman)
      echo "📦 Installing via pacman..."
      sudo pacman -Sy --noconfirm "${missing[@]}"
      ;;
    brew)
      echo "📦 Installing via Homebrew..."
      brew install "${missing[@]}"
      ;;
    *)
      echo "❌ Could not detect package manager. Please install manually: ${missing[*]}"
      exit 1
      ;;
  esac
}



init_config() {
  if [ ! -f "$CONFIG_FILE" ]; then
    echo "{}" > "$CONFIG_FILE"
  fi
}

add_server() {
  echo "➕ Adding new server configuration"
  read -p "Alias (short name): " alias
  read -p "Host (IP or domain): " host
  read -p "User (e.g., ubuntu, ec2-user, root): " user
  read -p "Connect with PEM file? (y/n): " pemchoice

  pem=""
  password=""
  if [ "$pemchoice" == "y" ]; then
    read -p "PEM file path: " pem
  else
    read -sp "Password: " password
    echo
  fi

  read -p "Needs sudo password? (y/n): " sudoc
  needs_sudo=false
  [ "$sudoc" == "y" ] && needs_sudo=true

  tmp=$(mktemp)
  jq ". + {\"$alias\": {\"host\": \"$host\", \"user\": \"$user\", \"pem\": \"$pem\", \"password\": \"$password\", \"needs_sudo\": $needs_sudo}}" "$CONFIG_FILE" > "$tmp" && mv "$tmp" "$CONFIG_FILE"
  echo "✅ Saved configuration for alias '$alias'"
}

connect_server() {
  alias=$1
  if [ -z "$alias" ]; then
    echo "⚠️ Usage: serverman connect <alias>"
    exit 1
  fi

  host=$(jq -r ".$alias.host" "$CONFIG_FILE")
  user=$(jq -r ".$alias.user" "$CONFIG_FILE")
  pem=$(jq -r ".$alias.pem" "$CONFIG_FILE")
  password=$(jq -r ".$alias.password" "$CONFIG_FILE")

  if [ "$host" == "null" ]; then
    echo "❌ No server found with alias '$alias'"
    exit 1
  fi

  echo "🔗 Connecting to $alias ($user@$host)..."
  if [ "$pem" != "null" ] && [ -n "$pem" ]; then
    ssh -i "$pem" "$user@$host" 2>ssh_error.log
    if grep -q "UNPROTECTED PRIVATE KEY FILE" ssh_error.log; then
      echo "⚠️ SSH refused the PEM file due to permissions."
      echo "👉 Run: chmod 600 \"$pem\""
      echo "👉 Or re-add the server so script auto-fixes permissions."
    fi
    rm -f ssh_error.log
  else
    sshpass -p "$password" ssh "$user@$host"
  fi
}


list_servers() {
  echo "📋 Saved servers:"
  jq 'keys' "$CONFIG_FILE"
}

remove_server() {
  alias=$1
  if [ -z "$alias" ]; then
    echo "⚠️ Usage: serverman remove <alias>"
    exit 1
  fi
  tmp=$(mktemp)
  jq "del(.\"$alias\")" "$CONFIG_FILE" > "$tmp" && mv "$tmp" "$CONFIG_FILE"
  echo "🗑️ Removed server '$alias'"
}

interactive_menu() {
  selected=$(list_servers | fzf --prompt="Select server: " --height=10 --reverse)
  if [ -n "$selected" ]; then
    connect_server "$selected"
  else
    echo "❌ No server selected"
  fi
}

check_dependencies
init_config

case "$1" in
  add) add_server ;;
  connect) connect_server "$2" ;;
  list) list_servers ;;
  remove) remove_server "$2" ;;
  "" ) interactive_menu ;;   # run interactive menu if no args
  *) echo "Usage: serverman {add|connect <alias>|list|remove <alias>}" ;;
esac

